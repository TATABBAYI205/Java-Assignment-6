Difference b/w Iterator and Listiterator in java:-
================================================
In Java, both `Iterator` and `ListIterator` are interfaces used for iterating over collections, but they have some differences in terms of functionality and the types of collections they can iterate. Here are the main differences between `Iterator` and `ListIterator`:

1. Type of Collection: The `Iterator` interface can be used to iterate over any type of collection that implements the `Collection` interface, including `List`, `Set`, and `Queue`. On the other hand, the `ListIterator` interface is specifically designed for iterating over elements in a `List` implementation, such as `ArrayList` or `LinkedList`. Therefore, `ListIterator` provides additional methods that are specific to lists.

2. Direction of Iteration: The `Iterator` interface allows you to iterate over the elements in a collection in a forward direction only, using methods like `hasNext()` and `next()`. It does not support backward traversal. In contrast, the `ListIterator` interface extends the `Iterator` interface and provides additional methods that enable bidirectional iteration. It allows you to traverse the list in both forward and backward directions using methods like `hasNext()`, `next()`, `hasPrevious()`, and `previous()`.

3. Modification of Collection: Both `Iterator` and `ListIterator` allow you to remove elements from the collection while iterating using the `remove()` method. However, `ListIterator` provides additional methods for adding and modifying elements during iteration. It includes methods like `add(Object obj)`, `set(Object obj)`, `add(E element)`, and `set(E element)` that allow you to insert elements at the current position or replace the last element returned by the iterator.

4. Index-based Access: `Iterator` does not provide direct index-based access to elements in a collection. It focuses on sequential iteration and does not expose the index of the current element. In contrast, `ListIterator` includes methods like `nextIndex()` and `previousIndex()` that return the index of the next or previous element in the list, allowing you to have more fine-grained control over the iteration process.

